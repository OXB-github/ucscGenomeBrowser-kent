#########################################################################
## collecting sequences - (DONE - 2020-03-06 - Hiram)
#########################################################################

mkdir -p /hive/data/genomes/wuhCor1/bed/lastzStrains/sequences

cd /hive/data/genomes/wuhCor1/bed/lastzStrains/sequences

#  The SARS-CoV-2.acc.2020-03-06.list is obtained from Entrez with search term:

#   SARS-CoV-2

# produces 108 sequences as of 06 March

With that list, fetch sequences and gbk records:

mkdir -p fasta gbk
cat SARS-CoV-2.acc.2020-03-06.list | while read acc
do
  if [ ! -s "fasta/${acc}.fa" ]; then
wget -O fasta/${acc}.fa \
   "http://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?db=nuccore&dopt=fasta&sendto=on&id=$acc"
wget -O gbk/${acc}.gbk \
  "http://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?db=nuccore&dopt=gb&sendto=on&id=$acc"
  fi
done

# The coronaviridae.list was obtained from Entrez with the search string:

#  Coronaviridae[Organism] AND srcdb_refseq[PROP] NOT wgs[PROP] NOT cellular organisms[ORGN] NOT AC_000001:AC_999999[PACC] 

#  Which was created from the page:

#  https://www.ncbi.nlm.nih.gov/genomes/GenomesGroup.cgi?taxid=11118

#  when asked to show "RefSeq nucleotides"

# this is a list of 55 sequences, all RefSeq with NC_ identifiers

# With that list, fetch sequences and gbk records:

cat coronaviridae.list | while read acc
do
  if [ ! -s "fasta/${acc}.fa" ]; then
wget -O fasta/${acc}.fa \
   "http://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?db=nuccore&dopt=fasta&sendto=on&id=$acc"
wget -O gbk/${acc}.gbk \
  "http://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?db=nuccore&dopt=gb&sendto=on&id=$acc"
  fi
done

# The china.all.fasta is from: the 'download all sequences' button

#   https://bigd.big.ac.cn/ncov/release_genome

# As well as the listing, from the 'download table' button:

#   china.sequence.list.txt

# Can select the 'complete' sequence list from that table:

 awk -F$'\t' '$5 == "Complete"' 'china.sequence.list.txt' | cut -f1,2,5

# split of the china.all.fasta record:

sed -e 's/^>.* />/;' china.all.fasta > shortNames.china.all.fasta
faSplit byname shortNames.china.all.fasta chinaFasta/

# Now, to eliminate the duplicates from those two sources:

faToTwoBit fasta/*.fa chinaFasta/*.fa t.2bit
twoBitDup t.2bit | awk '{print $1}' | sort > dup.list

# extract the non duplicates
twoBitToFa t.2bit stdout | faSomeRecords -exclude stdin dup.list nonDups.fa

# the duplicates were moved to ncbiDups/ and chinaDups/ directories
# need to ensure our reference is in there, it was a duplicate:
#  NC_045512.2 and MN908947.3 are identical
# and the MN908947.3 sequence was used, move those around to get the
# NC_045512.2 sequence there instead

# some sequences were too short, they were just gene sequences:

twoBitInfo t.2bit stdout | awk '$2 < 25000' > too.small

# LC522350.1      182
# LC523807.1      357
# MN938385.1      287
# MN938387.1      107
# MN970003.1      290
# MT008022.1      322
# MT042773.1      294
# MT050414.1      562
# MT072667.1      670
# MT072668.1      810
# MT081059.1      1260
# MT081066.1      1260
# MT111895.1      770
# MT111896.1      569
# MT127113.1      615
# MT127114.1      1411
# MT127115.1      1269
# MT127116.1      459
# MT152900.1      322
# NM_001371415.1  3339
# NM_021804.3     3596

# moved to ncbiTooSmall/ directory

# Construct UCSC safe sequence names:

mkdir -p safeNameFa

for F in fasta/*.fa chinaFasta/*.fa
do
  B=`basename $F | sed -e "s/\.\([0-9]\+\)/v\1/; s/-/_/g;"`
  printf "%s\n" "${B}"
#  head -12 "${F}" | sed -e 's/^>\([^ ]\+\).*/>\1/;' | sed -e 's/\./v/; s/-/_/g;'
  sed -e 's/^>\([^ ]\+\).*/>\1/;' "${F}" | sed -e 's/\./v/; s/-/_/g;' \
    > safeNameFa/${B}
done

# this leaves 119 sequences, mostly from NCBI, a few from China:

# GWHABKP00000000.fa  MT019532v1.fa   NC_001846v1.fa  NC_018871v1.fa
# GWHABKW00000000.fa  MT019533v1.fa   NC_002306v3.fa  NC_019843v3.fa
# LC521925.fa       MT020781v1.fa   NC_002645v1.fa  NC_022103v1.fa
# LC522972.fa       MT027062v1.fa   NC_003045v1.fa  NC_023760v1.fa
# LC522973.fa       MT027064v1.fa   NC_003436v1.fa  NC_025217v1.fa
# LC522974.fa       MT039873v1.fa   NC_004718v3.fa  NC_026011v1.fa
# LC522975.fa       MT039887v1.fa   NC_005831v2.fa  NC_028752v1.fa
# LC528232v1.fa     MT039888v1.fa   NC_006213v1.fa  NC_028806v1.fa
# LC528233v1.fa     MT039890v1.fa   NC_006577v2.fa  NC_028811v1.fa
# LR757995v1.fa     MT044257v1.fa   NC_009019v1.fa  NC_028814v1.fa
# LR757996v1.fa     MT044258v1.fa   NC_009020v1.fa  NC_028824v1.fa
# LR757997v1.fa     MT049951v1.fa   NC_009021v1.fa  NC_028833v1.fa
# LR757998v1.fa     MT066175v1.fa   NC_009657v1.fa  NC_030292v1.fa
# MN938384v1.fa     MT066176v1.fa   NC_009988v1.fa  NC_030886v1.fa
# MN975262v1.fa     MT072688v1.fa   NC_010437v1.fa  NC_032107v1.fa
# MN985325v1.fa     MT093571v1.fa   NC_010438v1.fa  NC_032730v1.fa
# MN988668v1.fa     MT093631v1.fa   NC_010646v1.fa  NC_034440v1.fa
# MN988713v1.fa     MT106052v1.fa   NC_010800v1.fa  NC_034972v1.fa
# MN994467v1.fa     MT106053v1.fa   NC_011547v1.fa  NC_035191v1.fa
# MN994468v1.fa     MT106054v1.fa   NC_011549v1.fa  NC_038294v1.fa
# MN996527v1.fa     MT118835v1.fa   NC_011550v1.fa  NC_038861v1.fa
# MN996528v1.fa     MT123290v1.fa   NC_012936v1.fa  NC_039207v1.fa
# MN996529v1.fa     MT123291v1.fa   NC_014470v1.fa  NC_039208v1.fa
# MN996530v1.fa     MT123292v1.fa   NC_016991v1.fa  NC_045512v2.fa
# MN996531v1.fa     MT123293v1.fa   NC_016992v1.fa  NMDC60013002_05.fa
# MN997409v1.fa     MT126808v1.fa   NC_016993v1.fa  NMDC60013002_06.fa
# MT007544v1.fa     MT135041v1.fa   NC_016994v1.fa  NMDC60013002_07.fa
# MT019529v1.fa     MT135043v1.fa   NC_016995v1.fa  NMDC60013002_09.fa
# MT019530v1.fa     MT152824v1.fa   NC_016996v1.fa  NMDC60013002_10.fa
# MT019531v1.fa     NC_001451v1.fa  NC_017083v1.fa

# verify no dups:

faToTwoBit safeNameFa/*.fa safeName.2bit
twoBitDup safeName.2bit
# is silent, and sizes are reasonable:
twoBitInfo safeName.2bit stdout | sort -k2,2n | head -2
# NC_039208v1     25425
# NC_035191v1     25995
twoBitInfo safeName.2bit stdout | sort -k2,2n | tail -2
# NC_025217v1     31491
# NC_010646v1     31686

