#!/usr/bin/env python3
"""
Generate GENCODE trackDb .ra and .html files and git add them.
Also generate blurb to section to edit into joinerCheck.
This needs to be done after tracks are loaded

Should be run in trackDb directory.

In order to easily track priority numbers in one place, this file is edited to add a new genome releases,
commenting out
rather than
"""
import os
import re
import subprocess
import argparse

##
# Templates generators to generate ra, html, and joiner files.  The select are
# passed flags, parameters and a list of strings with format templates.  They
# either return a template string or and empty string
##

# flags for tmplGen
STD = 0x01    # is only in normal GENCODE
LIFT = 0x02   # is only backmap GENCODE
BOTH = STD | LIFT
HGC = 0x04    # older, hgc-only version
CORE = 0x08   # core data on dev server, public uses hgGene
HUM = 0x10    # human-only

def tmplGenFlagCheck(flags, params):
    """Check flags against parameters"""
    # default
    if not (flags & (STD | LIFT)):
        flags |= STD | LIFT
    if not (flags & (HGC | CORE)):
        flags |= HGC | CORE
    # now check
    if (not (flags & STD)) and (not params.isLifted):
        return False
    elif (not (flags & LIFT)) and params.isLifted:
        return False
    elif (not (flags & CORE)) and params.isHgGene:
        return False
    elif (not (flags & HGC)) and (not params.isHgGene):
        return False
    elif (flags & HUM) and (not params.isHuman):
        return False
    else:
        return True

def tmplGen(flags, params, lines):
    """return lines merge into text if flags match, other empty string.  If a line is None,
    it is omitted."""
    if tmplGenFlagCheck(flags, params):
        return "\n".join([l for l in lines if l is not None]) + "\n"
    else:
        return ""

def trackDbComposite(params):
    """create composite"""
    yield tmplGen(BOTH | HGC, params, (
        "track gencodeV{gencodeVer}",))
    yield tmplGen(BOTH | CORE, params, (
        "track gencodeCoreV{gencodeVer}",))
    yield tmplGen(BOTH, params, (
        "compositeTrack on",
        "superTrack wgEncodeGencodeSuper pack"))
    yield tmplGen(STD | HGC, params, (
        "shortLabel All GENCODE V{gencodeVer}",
        "longLabel All GENCODE annotations from V{gencodeVer} (Ensembl {ensemblVer})",))
    yield tmplGen(LIFT | HGC, params, (
        "shortLabel GENCODE V{gencodeVer}",
        "longLabel GENCODE lifted annotations from V{gencodeVer} (Ensembl {ensemblVer})",))
    yield tmplGen(BOTH | CORE, params, (
        "shortLabel GENCODE core V{gencodeVer}",
        "longLabel GENCODE core annotations from V{gencodeVer} (Ensembl {ensemblVer})",))
    yield tmplGen(BOTH, params, (
        "group genes",
        "dragAndDrop subTracks",
        "priority {superTrackPriority:.3f}",
        "visibility pack",
        "allButtonPair on",
        "sortOrder name=+ view=+",
        "fileSortOrder labVersion=Contents dccAccession=UCSC_Accession",
        "type genePred",
        "configurable off"))
    yield tmplGen(BOTH | HGC, params, (
        "subGroup1 view View aGenes=Genes b2-way=2-way  cPolya=PolyA",
        "subGroup2 name Name Basic=Basic Comprehensive=Comprehensive Pseudogenes=Pseudogenes yTwo-way=2-way_Pseudogenes zPolyA=PolyA",))
    yield tmplGen(BOTH | CORE, params, (
        "subGroup1 view View aGenes=Genes",
        "subGroup2 name Name Annotations=Annotations",))

def trackDbViewGenes(params):
    """create ViewGenes """
    yield tmplGen(BOTH | HGC, params, (
        "    track gencodeV{gencodeVer}ViewGenes",
        "    subTrack gencodeV{gencodeVer}"))
    yield tmplGen(BOTH | CORE, params, (
        "    track gencodeCoreV{gencodeVer}ViewGenes",
        "    subTrack gencodeCoreV{gencodeVer}"))
    yield tmplGen(BOTH, params, (
        "    shortLabel Genes",
        "    view aGenes",
        "    configurable on",
        "    visibility pack"))
    yield tmplGen(BOTH, params, (
        "    type genePred",
        "    idXref gencodeAttrsV{gencodeVer} transcriptId geneId",
        "    itemClassTbl gencodeAttrsV{gencodeVer}",
        "    itemClassNameColumn transcriptId",
        "    itemClassClassColumn transcriptClass",
        "    cdsDrawDefault genomic\\ codons",
        "    baseColorUseCds given",
        "    baseColorDefault genomicCodons",
        "    geneClasses coding nonCoding pseudo problem",
        "    gClass_coding 12,12,120",
        "    gClass_nonCoding 0,153,0",
        "    gClass_pseudo 255,51,255",
        "    gClass_problem 254,0,0",
        "    highlightColor 255,255,0",
        "    # filterBy notes:",
        "    #  - attrs is an alias for the current gencodeAttrs in the sql",
        "    #  - transcriptMethod is a pseudo-column name, which is handled explictly in the code",
        "    #  - attrs.transcriptType are transcript biotypes.  This will get the current list of values:",
        "    #    hgsql -Ne 'select distinct(transcriptType) from gencodeAttrsV{gencodeVer} order by transcriptType' {orgHgDb}",
        "    #  - tag - is s pseudo-column name for join with the tag table.  This will get the current list of values:",
        "    #    hgsql -Ne 'select distinct(tag) from gencodeTagV{gencodeVer} order by tag' {orgHgDb}",
        "    #  - supportLevel is a pseudo-column name handled in the code",
        "    filterBy attrs.transcriptClass:Transcript_Class=coding,nonCoding,pseudo,problem \\",
        "             transcriptMethod:Transcript_Annotation_Method=manual,automatic,manual_only,automatic_only \\",
        "             attrs.transcriptType:Transcript_Biotype={transBiotypes} \\",
        "             tag:Tag={tags} \\",
        "             supportLevel:Support_Level=tsl1,tsl2,tsl3,tsl4,tsl5,tslNA",
        "    highlightBy transcriptMethod:Transcript_Annotation_Method=manual,automatic,manual_only,automatic_only \\",
        "                attrs.transcriptType:Transcript_Biotype={transBiotypes} \\",
        "                tag:Tag={tags} \\",
        "                supportLevel:Support_Level=tsl1,tsl2,tsl3,tsl4,tsl5,tslNA",
        ""))

def trackDbTemplateGenNonHgGene(params):
    """Generate template for trackDb ra for non-hgGene GENCODEs"""
    yield from trackDbComposite(params)
    # table variables; hgc checks for names with and without wgEncode prefix
    yield tmplGen(BOTH, params, (
        "gencodeVersion {gencodeVer}",
        "gencodeAttrs gencodeAttrsV{gencodeVer}"))
    yield tmplGen(STD, params, (
        "gencodeExonSupport gencodeExonSupportV{gencodeVer}",))
    yield tmplGen(BOTH, params, (
        "gencodeGeneSource gencodeGeneSourceV{gencodeVer}",
        "gencodeTranscriptSource gencodeTranscriptSourceV{gencodeVer}",
        "gencodeHgnc gencodeHgncV{gencodeVer}",
        "gencodePdb gencodePdbV{gencodeVer}",
        "gencodePubMed gencodePubMedV{gencodeVer}",
        "gencodeRefSeq gencodeRefSeqV{gencodeVer}",
        "gencodeTag gencodeTagV{gencodeVer}",
        "gencodeTranscriptSupport gencodeTranscriptSupportV{gencodeVer}",
        "gencodeUniProt gencodeUniProtV{gencodeVer}",
        "gencodeAnnotationRemark gencodeAnnotationRemarkV{gencodeVer}",
        "gencodeTranscriptionSupportLevel gencodeTranscriptionSupportLevelV{gencodeVer}",
        "gencodeEntrezGene gencodeEntrezGeneV{gencodeVer}",
        "gencodeGeneSymbol gencodeGeneSymbol{gencodeVer}",
        ""))

    # tracks and views
    yield from trackDbViewGenes(params)
    yield tmplGen(BOTH, params, (
        "        track gencodeBasicV{gencodeVer}",
        "        trackHandler gencode",
        "        subTrack gencodeV{gencodeVer}ViewGenes on",
        "        shortLabel Basic",
        "        subGroups view=aGenes name=Basic",
        "        longLabel Basic Gene Annotation Set from GENCODE Version {gencodeVer} (Ensembl {ensemblVer})",
        "        type genePred",
        "        priority 1",
        ""))
    yield tmplGen(BOTH, params, (
        "        track gencodeCompV{gencodeVer}",
        "        trackHandler gencode",
        "        subTrack gencodeV{gencodeVer}ViewGenes off",
        "        subGroups view=aGenes name=Comprehensive",
        "        shortLabel Comprehensive",
        "        longLabel Comprehensive Gene Annotation Set from GENCODE Version {gencodeVer} (Ensembl {ensemblVer})",
        "        type genePred",
        "        priority 2",
        ""))
    yield tmplGen(BOTH, params, (
        "        track gencodePseudoGeneV{gencodeVer}",
        "        trackHandler gencode",
        "        subTrack gencodeV{gencodeVer}ViewGenes on",
        "        subGroups view=aGenes name=Pseudogenes",
        "        shortLabel Pseudogenes",
        "        longLabel Pseudogene Annotation Set from GENCODE Version {gencodeVer} (Ensembl {ensemblVer})",
        "        type genePred",
        "        color 255,51,255",
        "        priority 3",
        ""))
    yield tmplGen(STD, params, (
        "    track gencodeV{gencodeVer}View2Way",
        "    shortLabel 2-Way",
        "    view b2-way",
        "    visibility hide",
        "    subTrack gencodeV{gencodeVer}",
        "    type genePred",
        "    configurable off",
        ""))
    yield tmplGen(STD, params, (
        "        track gencode2wayConsPseudoV{gencodeVer}",
        "        trackHandler gencode",
        "        subTrack gencodeV{gencodeVer}View2Way off",
        "        subGroups view=b2-way name=yTwo-way",
        "        shortLabel 2-way Pseudogenes",
        "        longLabel 2-way Pseudogene Annotation Set from GENCODE Version {gencodeVer} (Ensembl {ensemblVer})",
        "        type genePred",
        "        color 255,51,255",
        "        priority 4",
        ""))
    yield tmplGen(STD, params, (
        "    track gencodeV{gencodeVer}ViewPolya",
        "    shortLabel PolyA",
        "    view cPolya",
        "    visibility hide",
        "    subTrack gencodeV{gencodeVer}",
        "    type genePred",
        "    configurable off",
        ""))
    yield tmplGen(STD, params, (
        "        track gencodePolyaV{gencodeVer}",
        "        trackHandler gencode",
        "        subTrack gencodeV{gencodeVer}ViewPolya off",
        "        subGroups view=cPolya name=zPolyA",
        "        shortLabel PolyA",
        "        longLabel PolyA Transcript Annotation Set from GENCODE Version {gencodeVer} (Ensembl {ensemblVer})",
        "        type genePred",
        "        color 0,0,0",
        "        priority 5",
        ""))
    yield tmplGen(BOTH, params, (
        "# searches for basic",
        "searchName gencodeBasicV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblTransIdRegex}",
        "searchPriority {basicSearchPriority:.5f}",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeBasicGeneSymV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod exact",
        "searchType genePred",
        "searchPriority {basicGeneSymSearchPriority:.5f}",
        "query select chrom, txStart, txEnd, name2 from %s where name2 like '%s'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeBasicGeneV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblGeneIdRegex}",
        "searchPriority {basicGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,geneId from %s where geneId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeBasicHavanaTranscriptV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaTransIdRegex}",
        "searchPriority {basicHavanaTranscriptSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaTranscriptId from %s where havanaTranscriptId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeBasicHavanaGeneV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaGeneIdRegex}",
        "searchPriority {basicHavanaGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaGeneId from %s where havanaGeneId like '%s%%'",
        ""))
    yield tmplGen(STD, params, (
        "searchName gencodeBasicProtV{gencodeVer}",
        "searchTable gencodeBasicV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblProtIdRegex}",
        "searchPriority {basicEnsemblProtSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,proteinId from %s where proteinId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "# searches for comp",
        "searchName gencodeCompV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblTransIdRegex}",
        "searchPriority {compSearchPriority:.5f}",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeCompGeneSymV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod exact",
        "searchType genePred",
        "searchPriority {compGeneSymSearchPriority:.5f}",
        "query select chrom, txStart, txEnd, name2 from %s where name2 like '%s'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeCompGeneV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblGeneIdRegex}",
        "searchPriority {compGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,geneId from %s where geneId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeCompHavanaTranscriptV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaTransIdRegex}",
        "searchPriority {compHavanaTranscriptSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaTranscriptId from %s where havanaTranscriptId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeCompHavanaGeneV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaGeneIdRegex}",
        "searchPriority {compHavanaGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaGeneId from %s where havanaGeneId like '%s%%'",
        ""))
    yield tmplGen(STD, params, (
        "searchName gencodeCompProtV{gencodeVer}",
        "searchTable gencodeCompV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblProtIdRegex}",
        "searchPriority {compEnsemblProtSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,proteinId from %s where proteinId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "# searches for pseudogene",
        "searchName gencodePseudoGeneV{gencodeVer}",
        "searchTable gencodePseudoGeneV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblTransIdRegex}",
        "searchPriority {pseudoGeneSearchPriority:.5f}",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodePseudoGeneGeneSymV{gencodeVer}",
        "searchTable gencodePseudoGeneV{gencodeVer}",
        "searchMethod exact",
        "searchType genePred",
        "searchPriority {pseudoGeneGeneSymSearchPriority:.5f}",
        "query select chrom, txStart, txEnd, name2 from %s where name2 like '%s'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodePseudoGeneGeneV{gencodeVer}",
        "searchTable gencodePseudoGeneV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblGeneIdRegex}",
        "searchPriority {pseudoGeneGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,geneId from %s where geneId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodePseudoGeneHavanaTranscriptV{gencodeVer}",
        "searchTable gencodePseudoGeneV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaTransIdRegex}",
        "searchPriority {pseudoGeneHavanaTranscriptSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaTranscriptId from %s where havanaTranscriptId like '%s%%'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodePseudoGeneHavanaGeneV{gencodeVer}",
        "searchTable gencodePseudoGeneV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {havanaGeneIdRegex}",
        "searchPriority {pseudoGeneHavanaGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,havanaGeneId from %s where havanaGeneId like '%s%%'",
        ""))
    yield tmplGen(STD, params, (
        "# searches for 2-way consensus",
        "searchName gencode2wayConsPseudoV{gencodeVer}",
        "searchTable gencode2wayConsPseudoV{gencodeVer}",
        "searchMethod exact",
        "searchType genePred",
        "termRegex {twoWayPseudoIdRegex}",
        "searchPriority {twoWayConsPseudoSearchPriority:.5f}",
        ""))

def trackDbTemplateGenPostHgGene(params):
    """Generate template for trackDb ra for local hgc after hgGene GENCODEs"""
    yield from trackDbComposite(params)
    yield tmplGen(BOTH, params, (
        "gencodeVersion {gencodeVer}",
        "gencodeAttrs gencodeAttrsV{gencodeVer}"))
    yield tmplGen(STD, params, (
        "gencodeExonSupport gencodeExonSupportV{gencodeVer}",))
    yield tmplGen(BOTH, params, (
        "gencodeGeneSource gencodeGeneSourceV{gencodeVer}",
        "gencodeTranscriptSource gencodeTranscriptSourceV{gencodeVer}",
        "gencodeSymbol gencodeToSymbolV{gencodeVer}",
        "gencodePdb gencodeToPdbV{gencodeVer}",
        "gencodePubMed gencodeToPubMedV{gencodeVer}",
        "gencodeRefSeq gencodeToRefSeqV{gencodeVer}",
        "gencodeTag gencodeTagV{gencodeVer}",
        "gencodeTranscriptSupport gencodeTranscriptSupportV{gencodeVer}",
        "gencodeUniProt gencodeToUniProtV{gencodeVer}",
        "gencodeAnnotationRemark gencodeAnnotationRemarkV{gencodeVer}",
        "gencodeTranscriptionSupportLevel gencodeTranscriptionSupportLevelV{gencodeVer}",
        "gencodeEntrezGene gencodeToEntrezGeneV{gencodeVer}",
        "gencodeGeneSymbol gencodeToGeneSymbol{gencodeVer}",
        ""))
    yield from trackDbViewGenes(params)
    yield tmplGen(BOTH, params, (
        "        track gencodeAnnotV{gencodeVer}",
        "        subTrack gencodeCoreV{gencodeVer}ViewGenes on",
        "        shortLabel GENCODE core V{gencodeVer}",
        "        longLabel GENCODE core annotations from V{gencodeVer} (Ensembl {ensemblVer})",
        "        subGroups view=aGenes name=Annotations",
        "        group genes",
        "        priority 1.0",
        "        visibility pack",
        "        type genePred",
        ""))

    yield tmplGen(BOTH, params, (
        "# searches for annot",
        "searchName gencodeAnnotV{gencodeVer}",
        "searchTable gencodeAnnotV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblTransIdRegex}",
        "searchPriority {basicSearchPriority:.5f}",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeAnnotGeneSymV{gencodeVer}",
        "searchTable gencodeAnnotV{gencodeVer}",
        "searchMethod exact",
        "searchType genePred",
        "searchPriority {basicGeneSymSearchPriority:.5f}",
        "query select chrom, txStart, txEnd, name2 from %s where name2 like '%s'",
        ""))
    yield tmplGen(BOTH, params, (
        "searchName gencodeAnnotGeneV{gencodeVer}",
        "searchTable gencodeAnnotV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblGeneIdRegex}",
        "searchPriority {basicGeneSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,geneId from %s where geneId like '%s%%'",
        ""))
    yield tmplGen(STD, params, (
        "searchName gencodeAnnotProtV{gencodeVer}",
        "searchTable gencodeAnnotV{gencodeVer}",
        "searchMethod prefix",
        "searchType genePred",
        "termRegex {ensemblProtIdRegex}",
        "searchPriority {basicEnsemblProtSearchPriority:.5f}",
        "xrefTable gencodeAttrsV{gencodeVer}",
        "xrefQuery select transcriptId,proteinId from %s where proteinId like '%s%%'",
        ""))

def trackHtmlTemplateGen(params):
    """Generate template for track HTML"""
    yield tmplGen(BOTH, params, (
        "<h2>Description</h2>",
        "<p>",
        "The GENCODE Genes track (version {gencodeVer}, {gencodeDate}) shows high-quality manual",
        "annotations merged with evidence-based automated annotations across the entire",
        "{orgName} genome generated by the",
        '<a href="{gencodeGenesUrl}/" target="_blank">GENCODE project</a>.',
        "The GENCODE gene set presents a full merge",
        "between HAVANA manual annotation process and Ensembl automatic annotation pipeline.",
        "Priority is given to the manually curated HAVANA annotation using predicted",
        "Ensembl annotations when there are no corresponding manual annotations."))
    yield tmplGen(STD, params, (
        "The {gencodeVer} annotation was carried out on genome assembly {orgGrcRel} ({orgHgDb}).",
        "</p>"))
    yield tmplGen(LIFT, params, (
        "The GENCODE V{gencodeSrcVer} annotations on the GRCh38 (hg38) primary assembly",
        "were mapped to GRCh37 (hg19) using the process",
        '<a href="ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/_README_GRCh37_mapping.txt" target="_blank">documented here</a>.',
        "</p>"))
    yield tmplGen(BOTH, params, (
        "<p>",
        "The Ensembl human and mouse data sets are the same gene annotations as GENCODE for the",
        "corresponding release.",
        "</p>",
        "",
        '<!--#insert file="{displayHtml}"-->',
        "",
        "<h2>Downloads</h2>",
        "<p>GENCODE GFF3 and GTF files are available from the",
        '<a href="{gencodeReleaseUrl}" target="_blank">GENCODE release {gencodeVer}</a> site.</p>',
        ""))
    yield tmplGen(STD | HUM, params, (
        "<h2>Verification</h2>",
        "",
        "<P>",
        "Selected transcript models are verified experimentally by RT-PCR amplification followed by sequencing.",
        "Those experiments can be found at GEO:</P>",
        "<ul>",
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE30619" target="_blank"><b>GSE30619:[E-MTAB-612]</b></a> - Batch I is based on annotation from July 2008 (without pseudogenes).</li>',
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE25711" target="_blank"><b>GSE25711:[E-MTAB-407]</b></a> - Batch II is based on annotation from April 2009. </li>',
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE30612" target="_blank"><b>GSE30612:[E-MTAB-533]</b></a> - Batch III is verifying RGASP models for c.elegans and human.</li>',
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34797" target="_blank"><b>GSE34797:[E-MTAB-684]</b></a> - Batch IV is based on chromosome 3, 4 and 5 annotations from GENCODE 4 (January 2010).</li>',
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34820" target="_blank"><b>GSE34820:[E-MTAB-737]</b></a> - Batch V is based on annotations from GENCODE 6 (November 2010).</li>',
        '  <li> <a href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34821" target="_blank"><b>GSE34821:[E-MTAB-831]</b></a> - Batch VI is based on annotations from GENCODE 6 (November 2010) as well as transcript models predicted by the Ensembl Genebuild group based on the Illumina Human BodyMap 2.0 data. </li>',
        "</ul>",
        "<P> See Harrow <em>et al.</em> (2006) for information on verification",
        "techniques.",
        "</P>",
        ""))
    yield tmplGen(BOTH, params, (
        "<h2>Release Notes</h2>",
        "<p>",
        '<span style="font-weight: bold;">GENCODE version {gencodeVer} corresponds to Ensembl {ensemblVer}.</p>',
        '<p>See also: <a href="{gencodeGenesUrl}/" target="_blank">The GENCODE Project</a>',
        "</p>",
        "",
        '<!--#insert file="../../wgEncodeGencodeCredits1.shared.html"-->',))

def joinerCheckTemplateGen(params):
    """Generate template for all.joiner"""
    yield tmplGen(BOTH, params, (
        "# begin Gencode V{gencodeVer} (2020 reorganization)",
        "",
        "identifier gencodeAnnotAttrsV{gencodeVer}",
        '"Link together Gencode Annotation Table with Attributes table"',
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId",
        "    {orgHgDb}.gencodeAnnotV{gencodeVer}.name",
        "",
        "# gencode association tables (joined through gencodeAttrsV{gencodeVer})",
        "identifier gencodeGeneSourceV{gencodeVer}",
        '"Link together Gencode Gene Source table with Attributes table"',
        "    {orgHgDb}.gencodeGeneSourceV{gencodeVer}.geneId",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.geneId",
        "",
        "identifier gencodeGeneSymbolV{gencodeVer}",
        '"Link together Gencode gene symbol table with Attributes table"',
        "    {orgHgDb}.gencodeGeneSymbolV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.20",
        "",
        "identifier gencodePdbV{gencodeVer}",
        '"Link together Gencode Pdb table with Attributes table"',
        "    {orgHgDb}.gencodePdbV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.015",
        "",
        "identifier gencodePubMedV{gencodeVer}",
        '"Link together Gencode Pubmed table with Attributes table"',
        "    {orgHgDb}.gencodePubMedV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId  minCheck=0.63",
        "",
        "identifier gencodeRefSeqV{gencodeVer}",
        '"Link together Gencode RefSeq table with Attributes table"',
        "    {orgHgDb}.gencodeRefSeqV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.05",
        "",
        "identifier gencodeTagV{gencodeVer}",
        '"Link together Gencode Tag table with Attributes table"',
        "    {orgHgDb}.gencodeTagV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.36",
        "    {orgHgDb}.gencodeRefSeqV{gencodeVer}.transcriptId minCheck=0.9",
        "",
        "identifier gencodeTranscriptSourceV{gencodeVer}",
        '"Link together Gencode Transcript Source table with Attributes table"',
        "    {orgHgDb}.gencodeTranscriptSourceV{gencodeVer}.transcriptId",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId",
        "",
        "identifier gencodeTranscriptSupportV{gencodeVer}",
        '"Link together Gencode Transcript Support table with Attributes table"',
        "    {orgHgDb}.gencodeTranscriptSupportV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.20",
        "",
        "identifier gencodeTranscriptionSupportLevelV{gencodeVer}",
        '"Link together Gencode Transcription Support Level table with Attributes table"',
        "    {orgHgDb}.gencodeTranscriptionSupportLevelV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.30",
        "",
        "identifier gencodeUniProtV{gencodeVer}",
        '"Link together Gencode UniProt Support table with Attributes table"',
        "    {orgHgDb}.gencodeUniProtV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.35",
        "",
        "identifier gencodeAnnotationRemarkV{gencodeVer}",
        '"Link together Gencode Annotation Remark table with Attributes table"',
        "    {orgHgDb}.gencodeAnnotationRemarkV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.10",
        "",
        "identifier gencodeEntrezGeneV{gencodeVer}",
        '"Link together Gencode UniProt Support table with Attributes table"',
        "    {orgHgDb}.gencodeEntrezGeneV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeEntrezGeneV{gencodeVer}.transcriptId minCheck=0.35",
        ""))
    yield tmplGen(STD, params, (
        "identifier gencodeExonSupportV{gencodeVer}",
        '"Link together Gencode Exon Support table with Attributes table"',
        "    {orgHgDb}.gencodeExonSupportV{gencodeVer}.transcriptId dupeOk",
        "    {orgHgDb}.gencodeAttrsV{gencodeVer}.transcriptId minCheck=0.80",
        ""))
    yield tmplGen(BOTH, params, (
        "# end Gencode V{gencodeVer} (2020 reorganization)",
        ""))

def hgSql(orgHgDb, sql):
    return subprocess.check_output(["hgsql", orgHgDb, "-Ne", sql], encoding="utf-8").split('\n')[0:-1]

def gitAdd(fname):
    subprocess.check_call(["git", "add", fname])

def getTransBioTypes(orgHgDb, gencodeVer):
    "obtain sorted list of transcript biotypes"
    return hgSql(orgHgDb, "SELECT DISTINCT(transcriptType) FROM gencodeAttrsV{} ORDER BY transcriptType".format(gencodeVer))

def getTags(orgHgDb, gencodeVer):
    "obtain sorted list of tags"
    return hgSql(orgHgDb, "SELECT DISTINCT(tag) FROM gencodeTagV{} ORDER BY tag".format(gencodeVer))

class GencodeParams(object):
    """parameters to format info output files, base on GENCODE release.  Base
    priorities are the start point for generating actually priorities using
    the version number.  Logic on what to include is here.
    """
    def __init__(self, orgName, orgHgDb, gencodeVer, ensemblVer, gencodeDate,
                 superTrackBasePriority, searchBasePriority,
                 ensemblTransIdRegex, havanaTransIdRegex,
                 ensemblGeneIdRegex, havanaGeneIdRegex,
                 ensemblProtIdRegex, twoWayPseudoIdRegex):
        self.gencodeGenesUrl = "https://www.gencodegenes.org"
        self.orgName = orgName
        self.orgHgDb = orgHgDb
        if (orgHgDb == "hg38") or (orgHgDb == "grcHhh38"):
            self.orgGrcRel = "GRCh38"
        elif orgHgDb == "hg19":
            self.orgGrcRel = "GRCh37"
        elif orgHgDb == "mm10":
            self.orgGrcRel = "GRCm38"
        elif orgHgDb == "mm39":
            self.orgGrcRel = "GRCm39"
        else:
            raise Exception("not a GENCODE hgdb: {}".format(orgHgDb))
        self.gencodeVer = gencodeVer
        self.gencodeSrcVer = gencodeVer.split("lift")[0]
        self.ensemblVer = ensemblVer
        self.gencodeDate = gencodeDate
        m = re.match("M?([0-9]+)(lift37)?$", gencodeVer)
        self.numVersion = int(m.group(1))  # for constructing priorities
        self.gencodeReleaseUrl = "{}/{}/release_{}.html".format(self.gencodeGenesUrl, self.orgName, gencodeVer)
        self.ensemblTransIdRegex = ensemblTransIdRegex
        self.havanaTransIdRegex = havanaTransIdRegex
        self.ensemblGeneIdRegex = ensemblGeneIdRegex
        self.havanaGeneIdRegex = havanaGeneIdRegex
        self.ensemblProtIdRegex = ensemblProtIdRegex
        self.twoWayPseudoIdRegex = twoWayPseudoIdRegex

        self.transBiotypes = ",".join(getTransBioTypes(orgHgDb, gencodeVer))
        self.tags = ",".join(getTags(orgHgDb, gencodeVer))

        # Compute priorities based on version.  This generated
        # priorities lower than ones that were hard-code before this
        # program was written. Adjusting track priority and search priorities by
        # -0.001*numVersion

        self.superTrackPriority = superTrackBasePriority - (0.001 * self.numVersion)

        self.searchPriority = searchBasePriority - (0.001 * self.numVersion)
        self.nextPriorityOff = 0.00000  # incremented when each priority is allocated

        self.basicSearchPriority = self.nextPriority()
        self.basicGeneSymSearchPriority = self.nextPriority()
        self.basicGeneSearchPriority = self.nextPriority()
        self.basicHavanaTranscriptSearchPriority = self.nextPriority()
        self.basicHavanaGeneSearchPriority = self.nextPriority()
        self.basicHavanaGeneSearchPriority = self.nextPriority()
        self.basicEnsemblProtSearchPriority = self.nextPriority()

        self.compSearchPriority = self.nextPriority()
        self.compGeneSymSearchPriority = self.nextPriority()
        self.compGeneSearchPriority = self.nextPriority()
        self.compHavanaTranscriptSearchPriority = self.nextPriority()
        self.compHavanaGeneSearchPriority = self.nextPriority()
        self.compEnsemblProtSearchPriority = self.nextPriority()

        self.pseudoGeneSearchPriority = self.nextPriority()
        self.pseudoGeneGeneSymSearchPriority = self.nextPriority()
        self.pseudoGeneGeneSearchPriority = self.nextPriority()
        self.pseudoGeneHavanaTranscriptSearchPriority = self.nextPriority()
        self.pseudoGeneHavanaGeneSearchPriority = self.nextPriority()

        self.twoWayConsPseudoSearchPriority = self.nextPriority()

        if self.isLifted:
            self.displayHtml = "../../wgEncodeGencodeDisplayLift1.shared.html"
        else:
            self.displayHtml = "../../wgEncodeGencodeDisplay1.shared.html"

        # GENCODE V35 was switch to using hgGene rather than hgc.  hgc
        # is still support for checking initial import.  lift doesn't use
        # hgc
        self.isHgGene = (self.orgGrcRel == "GRCh38") and (self.numVersion >= 35)

    def nextPriority(self):
        """allocated the next search priority"""
        p = self.searchPriority + self.nextPriorityOff
        self.nextPriorityOff += 0.00001
        return p

    def getTrackDbFileName(self, ext):
        return os.path.join(self.orgName, self.orgHgDb, "gencodeCoreV{}.{}".format(self.gencodeVer, ext))

    @property
    def isHuman(self):
        return self.orgName == "human"

    @property
    def isLifted(self):
        return self.gencodeVer.find("lift") >= 0

def getHumanGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate):
    "create GENCODE parameters for human GENCODE"
    return GencodeParams("human", orgHgDb, gencodeVer, ensemblVer, gencodeDate,
                         34.205, 2.29701,
                         "ENST[0-9.]+", "OTTHUMT[0-9.]+",
                         "ENSG[0-9.]+", "OTTHUMG[0-9.]+",
                         "ENSP[0-9.]+", "PGOHUM[0-9.]+")

def getHumanBackmapGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate):
    "create GENCODE parameters for human backmapped GENCODE"
    return GencodeParams("human", orgHgDb, gencodeVer, ensemblVer, gencodeDate,
                         34.205, 2.29701,
                         "ENST[0-9._]+", "OTTHUMT[0-9._]+",
                         "ENSG[0-9._]+", "OTTHUMG[0-9._]+",
                         None, None)

def getMouseGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate):
    "create GENCODE parameters for mouse GENCODE"
    return GencodeParams("mouse", orgHgDb, gencodeVer, ensemblVer, gencodeDate,
                         2.984, 2.27401,
                         "ENSMUST[0-9.]+", "OTTMUST[0-9.]+",
                         "ENSMUSG[0-9.]+", "OTTMUSG[0-9.]+",
                         "ENSMUSP[0-9.]+", "PGOMOU[0-9.]+")

def getGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate):
    "create GencodeParams object for a single"
    if (orgHgDb == "hg38") or (orgHgDb == "grcHhh38"):
        return getHumanGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate)
    elif orgHgDb == "hg19":
        return getHumanBackmapGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate)
    elif orgHgDb == "mm10":
        return getMouseGencodeParams(orgHgDb, gencodeVer, ensemblVer, gencodeDate)
    else:
        raise Exception("unknown GENCODE hg db: {}".format(orgHgDb))

def writePart(fh, templ, params):
    "output one section, formatting params"
    fh.write(templ.format(**vars(params)))

def generateRaFile(params, addToGit):
    raFile = params.getTrackDbFileName("ra")
    print("generating {}".format(raFile))
    genFunc = trackDbTemplateGenPostHgGene if params.isHgGene else trackDbTemplateGenNonHgGene
    with open(raFile, "w") as fh:
        for part in genFunc(params):
            writePart(fh, part, params)
    if addToGit:
        gitAdd(raFile)

def generateHtmlFile(params, addToGit):
    htmlFile = params.getTrackDbFileName("html")
    print("generating {}".format(htmlFile))
    with open(htmlFile, "w") as fh:
        for part in trackHtmlTemplateGen(params):
            writePart(fh, part, params)
    if addToGit:
        gitAdd(htmlFile)

def generateJoinerFile(params):
    joinerFile = os.path.expanduser("~/tmp/gencodeCoreV{}.joiner".format(params.gencodeVer))
    print("generating {}".format(joinerFile))
    with open(joinerFile, "w") as joinerFh:
        for part in joinerCheckTemplateGen(params):
            writePart(joinerFh, part, params)

def gencodeGenerateTrackDbs(opts):
    params = getGencodeParams(opts.hgDb, opts.gencodeVer, opts.ensemblVer, opts.gencodeDate)
    generateRaFile(params, not opts.noGit)
    generateHtmlFile(params, not opts.noGit)
    generateJoinerFile(params)

def parseArgs():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--noGit", action="store_true",
                        help="do not add generated files to git")
    parser.add_argument("hgDb", help="UCSC database")
    parser.add_argument("gencodeVer", help="GENCODE version number ")
    parser.add_argument("ensemblVer", help="Ensembl version number ")
    parser.add_argument("gencodeDate", help="Month and year of GENCODE release, in the form `August 2014'")
    opts = parser.parse_args()
    verRe = "M?([0-9]+)(lift37)?$"
    if re.match(verRe, opts.gencodeVer) is None:
        raise Exception("GENCODE version should match {}, got `{}'".format(verRe, opts.gencodeVer))
    return opts


gencodeGenerateTrackDbs(parseArgs())
