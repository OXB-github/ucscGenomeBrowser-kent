#!/usr/bin/env python3

import sys
import os
import re
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(os.path.expanduser("~markd/compbio/code/pycbio/lib"))
import argparse
from pycbio.db import mysqlOps
from pycbio.hgdata import hgDb
from pycbio.hgdata.chromInfo import ChromInfoTbl

##
# N.B. EnsSeqs.__ignoredSpecialCase* functions identify cases to ignore are not worth coding around in
# a more general way.
##

ucscDbToRefAsm = {
    "hg19": "GRCh37",
    "hg38": "GRCh38",
    "mm10": "GRCm38",
    "mm39": "GRCm39",
}


def parseArgs():
    desc = """Generate liftOver chains of GENCODE chromosome names to UCSC chromosomes.

For GRCh37, this does special handling of chrM to handle mapping
NC_012920 to UCSC chrM.

It also create mappings for the chr* names used by GENCODE and ENCODE,
with the exclusion of chrM on GRCh37.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("ucscDbName", choices=ucscDbToRefAsm.keys(),
                        help="UCSC daatbase name for reference assembly name")
    parser.add_argument("ensToUcscLift",
                        help="GENCODE/Ensembl to UCSC to liftOver chains")
    return parser.parse_args()


# template for 1-to-1 chain
chainTmpl = """chain {size} {qName} {size} + 0 {size} {tName} {size} + 0 {size} {chainId}
{size}
"""

# alignment of chrMs on hg19. GRCh37 did not which initially have chrM,
# so UCSC chose a different one.
hg19ChrMQNames = ("NC_012920", "MT", "chrM")

hg19ChrMChain = """chain 16493 {qName} 16569 + 0 16569 chrM 16571 + 0 16571 {chainId}
309	0	1
6	0	1
2791	1	0
13081	1	2
380
"""

class UcscToEnsemblMap(object):
    def __init__(self, conn):
        self.ucscToEnsembl = {}
        self.ensemblToUcsc = {}
        for row in mysqlOps.query(conn, "SELECT ucsc, ensembl FROM ucscToEnsembl"):
            self.ucscToEnsembl[row[0]] = row[1]
            self.ensemblToUcsc[row[1]] = row[0]

def isPrimaryChrom(chrom):
    return re.match("^chr(([1-9][0-9]?)|[XYM])$", chrom)

def writeHg19ChrM(nextChainId, fh):
    for chrMName in hg19ChrMQNames:
        fh.write(hg19ChrMChain.format(qName=chrMName, chainId=nextChainId))
        nextChainId += 1
    return nextChainId

def writeStdChain(ucscDbName, ucscChrom, ucscToEnsemblMap, nextChainId, fh):
    ensChrom = ucscToEnsemblMap.ucscToEnsembl.get(ucscChrom.chrom)
    if ensChrom is not None:
        fh.write(chainTmpl.format(size=ucscChrom.size, qName=ensChrom, tName=ucscChrom.chrom, chainId=nextChainId))
        nextChainId += 1
    if isPrimaryChrom(ucscChrom.chrom):
        fh.write(chainTmpl.format(size=ucscChrom.size, qName=ucscChrom.chrom, tName=ucscChrom.chrom, chainId=nextChainId))
        nextChainId += 1
    return nextChainId


def writeChain(ucscDbName, ucscChrom, ucscToEnsemblMap, nextChainId, fh):
    if (ucscDbName == "hg19") and (ucscChrom.chrom == "chrM"):
        return writeHg19ChrM(nextChainId, fh)
    else:
        return writeStdChain(ucscDbName, ucscChrom, ucscToEnsemblMap, nextChainId, fh)


def writeChains(ucscDbName, ucscChroms, ucscToEnsemblMap, fh):
    nextChainId = 1
    for ucscChrom in ucscChroms.values():
        nextChainId = writeChain(ucscDbName, ucscChrom, ucscToEnsemblMap, nextChainId, fh)


def ensToUcscMkLift(opts):
    conn = hgDb.connect(opts.ucscDbName)
    ucscChroms = ChromInfoTbl.loadDb(conn)
    ucscToEnsemblMap = UcscToEnsemblMap(conn)
    conn.close

    with open(opts.ensToUcscLift, "w") as fh:
        writeChains(opts.ucscDbName, ucscChroms, ucscToEnsemblMap, fh)


mysqlOps.mySqlSetErrorOnWarn()
ensToUcscMkLift(parseArgs())
