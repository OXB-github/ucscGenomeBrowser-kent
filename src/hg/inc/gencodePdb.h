/* gencodePdb.h was originally generated by the autoSql program, which also 
 * generated gencodePdb.c and gencodePdb.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef GENCODEPDB_H
#define GENCODEPDB_H

#define GENCODEPDB_NUM_COLS 2

extern char *gencodePdbCommaSepFieldNames;

struct gencodePdb
/* GENCODE transcript to Protein Data Bank (PDB) protein structure mapping */
    {
    struct gencodePdb *next;  /* Next in singly linked list. */
    char *transcriptId;	/* GENCODE transcript identifier */
    char *pdbId;	/* Protein Data Bank (PDB) identifier */
    };

void gencodePdbStaticLoad(char **row, struct gencodePdb *ret);
/* Load a row from gencodePdb table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct gencodePdb *gencodePdbLoad(char **row);
/* Load a gencodePdb from row fetched with select * from gencodePdb
 * from database.  Dispose of this with gencodePdbFree(). */

struct gencodePdb *gencodePdbLoadAll(char *fileName);
/* Load all gencodePdb from whitespace-separated file.
 * Dispose of this with gencodePdbFreeList(). */

struct gencodePdb *gencodePdbLoadAllByChar(char *fileName, char chopper);
/* Load all gencodePdb from chopper separated file.
 * Dispose of this with gencodePdbFreeList(). */

#define gencodePdbLoadAllByTab(a) gencodePdbLoadAllByChar(a, '\t');
/* Load all gencodePdb from tab separated file.
 * Dispose of this with gencodePdbFreeList(). */

struct gencodePdb *gencodePdbCommaIn(char **pS, struct gencodePdb *ret);
/* Create a gencodePdb out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new gencodePdb */

void gencodePdbFree(struct gencodePdb **pEl);
/* Free a single dynamically allocated gencodePdb such as created
 * with gencodePdbLoad(). */

void gencodePdbFreeList(struct gencodePdb **pList);
/* Free a list of dynamically allocated gencodePdb's */

void gencodePdbOutput(struct gencodePdb *el, FILE *f, char sep, char lastSep);
/* Print out gencodePdb.  Separate fields with sep. Follow last field with lastSep. */

#define gencodePdbTabOut(el,f) gencodePdbOutput(el,f,'\t','\n');
/* Print out gencodePdb as a line in a tab-separated file. */

#define gencodePdbCommaOut(el,f) gencodePdbOutput(el,f,',',',');
/* Print out gencodePdb as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GENCODEPDB_H */

